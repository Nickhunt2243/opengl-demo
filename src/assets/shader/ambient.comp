#version 460 core
layout (local_size_x = 3, local_size_y = 1, local_size_z = 1) in;

uniform int u_numChunks;
uniform int u_renderDistance;
uniform ivec2 u_chunkPos;

const int CHUNK_WIDTH = 16;
const int CHUNK_HEIGHT = 256;
const int BLOCKS_IN_CHUNK = CHUNK_WIDTH * CHUNK_WIDTH * CHUNK_HEIGHT;

struct BlockInformation
{
    int sideData;
    int lighting[3];
};
// A buffer that will be updated when the blocks in game are updated
layout (std430, binding = 0) buffer blockInformationBuffer
{
    BlockInformation blockInfo[];
};

int findChunkIdx(int coord)
{
    if (coord + u_renderDistance < 0)
    {
        return ((((((coord + u_renderDistance) * -1) % u_numChunks) * -1) + u_numChunks) % u_numChunks);
    }
    else
    {
        return (((coord + u_renderDistance) % u_numChunks) + u_numChunks) % u_numChunks;
    }
}
bool getBlockExists(uint blockIdx)
{
    int currNeighbor = blockInfo[blockIdx].sideData;

    return (currNeighbor & 1) == 1;
}
int vertexAO(uint side1Idx, uint side2Idx, uint cornerIdx)
{
    int side1Exists  = getBlockExists(side1Idx) ? 1 : 0;
    int side2Exists  = getBlockExists(side2Idx) ? 1 : 0;
    int cornerExists = getBlockExists(cornerIdx) ? 1 : 0;
    if (side1Exists == 1 && side2Exists == 1)
    {
        return 0;
    }
    return 3 - (side1Exists + side2Exists + cornerExists);
}
int fillAmbience(int oldValue, int aoValue, int idx)
{
    return oldValue | (aoValue << (idx * 2));
}

int calcIdx(ivec2 chunkPos, ivec3 blockPos, ivec3 offset)
{
    ivec3 newBlock = blockPos + offset;
    if (newBlock.x == -1)
    {
        newBlock.x = 15;
        chunkPos.x -= 1;
    }
    else if (newBlock.x == 16)
    {
        newBlock.x = 0;
        chunkPos.x += 1;
    }
    if (newBlock.z == -1)
    {
        newBlock.z = 15;
        chunkPos.y -= 1;
    }
    else if (newBlock.z == 16)
    {
        newBlock.z = 0;
        chunkPos.y += 1;
    }
    int chunkIdx = (findChunkIdx(chunkPos.x) * u_numChunks) + findChunkIdx(chunkPos.y);
    int blockIdx = (newBlock.y * CHUNK_WIDTH * CHUNK_WIDTH) + (newBlock.z * CHUNK_WIDTH) + (newBlock.x);
    return (chunkIdx * BLOCKS_IN_CHUNK) + blockIdx;
}
void main()
{
    uint sideIdx = gl_LocalInvocationIndex;
    ivec3 blockPos = ivec3((gl_GlobalInvocationID.x / 3) % CHUNK_WIDTH, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z % CHUNK_WIDTH);
    int idx = calcIdx(u_chunkPos, blockPos, ivec3(0));

    int info = 0;
    if (sideIdx == 0) {
        // Y_max
            int cornerIdxMinMin = calcIdx(u_chunkPos, blockPos, ivec3(-1, 1, -1));
            int cornerIdxMinMax = calcIdx(u_chunkPos, blockPos, ivec3(-1, 1, 1));
            int cornerIdxMaxMin = calcIdx(u_chunkPos, blockPos, ivec3(1, 1, -1));
            int cornerIdxMaxMax = calcIdx(u_chunkPos, blockPos, ivec3(1, 1, 1));
            int sideIdxXMax = calcIdx(u_chunkPos, blockPos, ivec3(1, 1, 0));
            int sideIdxXMin = calcIdx(u_chunkPos, blockPos, ivec3(-1, 1, 0));
            int sideIdxZMax = calcIdx(u_chunkPos, blockPos, ivec3(0, 1, 1));
            int sideIdxZMin = calcIdx(u_chunkPos, blockPos, ivec3(0, 1, -1));
            // x_min z_min
            int aoValue = vertexAO(sideIdxXMin, sideIdxZMin, cornerIdxMinMin);
            info = aoValue;
            // x_min z_max
            aoValue = vertexAO(sideIdxXMin, sideIdxZMax, cornerIdxMinMax);
            info = info | (aoValue << 2);
            // x_max z_min
            aoValue = vertexAO(sideIdxXMax, sideIdxZMin, cornerIdxMaxMin);
            info = info | (aoValue << 4);
            // x_max z_max
            aoValue = vertexAO(sideIdxXMax, sideIdxZMax, cornerIdxMaxMax);
            info = info | (aoValue << 6);
        // Y_Min
            cornerIdxMinMin = calcIdx(u_chunkPos, blockPos, ivec3(-1, -1, -1));
            cornerIdxMinMax = calcIdx(u_chunkPos, blockPos, ivec3(-1, -1, 1));
            cornerIdxMaxMin = calcIdx(u_chunkPos, blockPos, ivec3(1, -1, -1));
            cornerIdxMaxMax = calcIdx(u_chunkPos, blockPos, ivec3(1, -1, 1));
            sideIdxXMax = calcIdx(u_chunkPos, blockPos, ivec3(1, -1, 0));
            sideIdxXMin = calcIdx(u_chunkPos, blockPos, ivec3(-1, -1, 0));
            sideIdxZMax = calcIdx(u_chunkPos, blockPos, ivec3(0, -1, 1));
            sideIdxZMin = calcIdx(u_chunkPos, blockPos, ivec3(0, -1, -1));
            // x_min z_min
            aoValue = vertexAO(sideIdxXMin, sideIdxZMin, cornerIdxMinMin);
            info = info | (aoValue << 8);
            // x_min z_max
            aoValue = vertexAO(sideIdxXMin, sideIdxZMax, cornerIdxMinMax);
            info = info | (aoValue << 10);
            // x_max z_min
            aoValue = vertexAO(sideIdxXMax, sideIdxZMin, cornerIdxMaxMin);
            info = info | (aoValue << 12);
            // x_max z_max
            aoValue = vertexAO(sideIdxXMax, sideIdxZMax, cornerIdxMaxMax);
            info = info | (aoValue << 14);
        blockInfo[idx].lighting[0] = info;
    }
    else if (sideIdx == 1)
    {
    // X_Max
        int cornerIdxMinMin = calcIdx(u_chunkPos, blockPos, ivec3(1, -1, -1));
        int cornerIdxMinMax = calcIdx(u_chunkPos, blockPos, ivec3(1, -1, 1));
        int cornerIdxMaxMin = calcIdx(u_chunkPos, blockPos, ivec3(1, 1, -1));
        int cornerIdxMaxMax = calcIdx(u_chunkPos, blockPos, ivec3(1, 1, 1));
        int sideIdxYMax = calcIdx(u_chunkPos, blockPos, ivec3(1, 1, 0));
        int sideIdxYMin = calcIdx(u_chunkPos, blockPos, ivec3(1, -1, 0));
        int sideIdxZMax = calcIdx(u_chunkPos, blockPos, ivec3(1, 0, 1));
        int sideIdxZMin = calcIdx(u_chunkPos, blockPos, ivec3(1, 0, -1));
        // z_min y_min
        int aoValue = vertexAO(sideIdxYMin, sideIdxZMin, cornerIdxMinMin);
        info = aoValue;
        // z_max y_min
        aoValue = vertexAO(sideIdxYMin, sideIdxZMax, cornerIdxMinMax);
        info = info | (aoValue << 2);
        // z_min y_max
        aoValue = vertexAO(sideIdxYMax, sideIdxZMin, cornerIdxMaxMin);
        info = info | (aoValue << 4);
        // z_max y_max
        aoValue = vertexAO(sideIdxYMax, sideIdxZMax, cornerIdxMaxMax);
        info = info | (aoValue << 6);
    // X_Min
        cornerIdxMinMin = calcIdx(u_chunkPos, blockPos, ivec3(-1, -1, -1));
        cornerIdxMinMax = calcIdx(u_chunkPos, blockPos, ivec3(-1, -1, 1));
        cornerIdxMaxMin = calcIdx(u_chunkPos, blockPos, ivec3(-1, 1, -1));
        cornerIdxMaxMax = calcIdx(u_chunkPos, blockPos, ivec3(-1, 1, 1));
        sideIdxYMax = calcIdx(u_chunkPos, blockPos, ivec3(-1, 1, 0));
        sideIdxYMin = calcIdx(u_chunkPos, blockPos, ivec3(-1, -1, 0));
        sideIdxZMax = calcIdx(u_chunkPos, blockPos, ivec3(-1, 0, 1));
        sideIdxZMin = calcIdx(u_chunkPos, blockPos, ivec3(-1, 0, -1));
        // z_min y_min
        aoValue = vertexAO(sideIdxYMin, sideIdxZMin, cornerIdxMinMin);
        info = info | (aoValue << 8);
        // z_max y_min
        aoValue = vertexAO(sideIdxYMin, sideIdxZMax, cornerIdxMinMax);
        info = info | (aoValue << 10);
        // z_min y_max
        aoValue = vertexAO(sideIdxYMax, sideIdxZMin, cornerIdxMaxMin);
        info = info | (aoValue << 12);
        // z_max y_max
        aoValue = vertexAO(sideIdxYMax, sideIdxZMax, cornerIdxMaxMax);
        info = info | (aoValue << 14);
        blockInfo[idx].lighting[1] = info;
    }
    else if (sideIdx == 2)
    {
    // Z_Max
        int cornerIdxMinMin = calcIdx(u_chunkPos, blockPos, ivec3(-1, -1, 1));
        int cornerIdxMinMax = calcIdx(u_chunkPos, blockPos, ivec3(-1, 1, 1));
        int cornerIdxMaxMin = calcIdx(u_chunkPos, blockPos, ivec3(1, -1, 1));
        int cornerIdxMaxMax = calcIdx(u_chunkPos, blockPos, ivec3(1, 1, 1));
        int sideIdxYMax = calcIdx(u_chunkPos, blockPos, ivec3(0, 1, 1));
        int sideIdxYMin = calcIdx(u_chunkPos, blockPos, ivec3(0, -1, 1));
        int sideIdxXMax = calcIdx(u_chunkPos, blockPos, ivec3(1, 0, 1));
        int sideIdxXMin = calcIdx(u_chunkPos, blockPos, ivec3(-1, 0, 1));
        // x_min y_min
        int aoValue = vertexAO(sideIdxYMin, sideIdxXMin, cornerIdxMinMin);
        info = info | (aoValue << 0);
        // x_max y_min
        aoValue = vertexAO(sideIdxYMin, sideIdxXMax, cornerIdxMaxMin);
        info = info | (aoValue << 2);
        // x_min y_max
        aoValue = vertexAO(sideIdxYMax, sideIdxXMin, cornerIdxMinMax);
        info = info | (aoValue << 4);
        // x_max y_max
        aoValue = vertexAO(sideIdxYMax, sideIdxXMax, cornerIdxMaxMax);
        info = info | (aoValue << 6);
    // Z_Min
        cornerIdxMinMin = calcIdx(u_chunkPos, blockPos, ivec3(-1, -1, -1));
        cornerIdxMinMax = calcIdx(u_chunkPos, blockPos, ivec3(-1, 1, -1));
        cornerIdxMaxMin = calcIdx(u_chunkPos, blockPos, ivec3(1, -1, -1));
        cornerIdxMaxMax = calcIdx(u_chunkPos, blockPos, ivec3(1, 1, -1));
        sideIdxYMax = calcIdx(u_chunkPos, blockPos, ivec3(0, 1, -1));
        sideIdxYMin = calcIdx(u_chunkPos, blockPos, ivec3(0, -1, -1));
        sideIdxXMax = calcIdx(u_chunkPos, blockPos, ivec3(1, 0, -1));
        sideIdxXMin = calcIdx(u_chunkPos, blockPos, ivec3(-1, 0, -1));
        // x_min y_min
        aoValue = vertexAO(sideIdxYMin, sideIdxXMin, cornerIdxMinMin);
        info = info | (aoValue << 8);
        // x_max y_min
        aoValue = vertexAO(sideIdxYMin, sideIdxXMax, cornerIdxMaxMin);
        info = info | (aoValue << 10);
        // x_min y_max
        aoValue = vertexAO(sideIdxYMax, sideIdxXMin, cornerIdxMinMax);
        info = info | (aoValue << 12);
        // x_max y_max
        aoValue = vertexAO(sideIdxYMax, sideIdxXMax, cornerIdxMaxMax);
        info = info | (aoValue << 14);

        blockInfo[idx].lighting[2] = info;
    }
}
